<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>CalcDieta</title>
    <!-- Tailwind CSS -->
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            transition: background 0.3s, color 0.3s;
            min-height: 100vh;
            overflow-y: auto;
            overflow-x: hidden;
            box-sizing: border-box;
        }
        body.d {
            background: #1f2937;
            color: #e5e7eb;
        }
        .t {
            position: fixed;
            top: 10px;
            right: 10px;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background: #f59e0b;
            border: none;
            cursor: pointer;
            transition: background 0.3s;
        }
        .d .t {
            background: #6b7280;
        }
        .c {
            overflow-x: auto;
            margin-top: 5px;
            width: 100%;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            background: #ffffff;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 15px;
            border-radius: 8px;
        }
        body.d table {
            background: #374151;
            box-shadow: 0 2px 8px rgba(255, 255, 255, 0.1);
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e5e7eb;
        }
        body.d th, body.d td {
            border-bottom: 1px solid #4b5563;
        }
        th {
            background: #10b981;
            color: #ffffff;
            font-size: 14px;
            font-weight: 600;
        }
        body.d th {
            background: #059669;
        }
        td {
            font-size: 14px;
        }
        body.d td {
            color: #e5e7eb;
        }
        input[type="tel"], input[type="number"] {
            width: 60px;
            padding: 6px;
            font-size: 14px;
            border-radius: 4px;
            border: 1px solid #d1d5db;
        }
        .to {
            font-weight: 700;
            background: #f3f4f6;
        }
        body.d .to {
            background: #4b5563;
        }
        .st {
            font-weight: 700;
            background: #f0f9ff;
        }
        body.d .st {
            background: #475569;
        }
        .sh {
            background: #e5e7eb;
            font-weight: 700;
            font-size: 16px;
            padding: 12px;
            text-align: center;
        }
        body.d .sh {
            background: #4b5563;
        }
        .df {
            margin-top: 5px;
            padding: 12px;
            background: #fef08a;
            border-radius: 8px;
            text-align: center;
            font-size: 16px;
        }
        body.d .df {
            background: #ca8a04;
            color: #1f2937;
        }
        .sm {
            margin-top: 15px;
            padding: 15px;
            background: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        body.d .sm {
            background: #374151;
            box-shadow: 0 2px 8px rgba(255, 255, 255, 0.1);
        }
        .sm p {
            margin: 8px 0;
            font-size: 14px;
            line-height: 1.5;
        }
        body.d .sm p {
            color: #e5e7eb;
        }
        .sm strong {
            color: #10b981;
        }
        body.d .sm strong {
            color: #34d399;
        }
        @media (max-width: 768px) {
            body {
                padding: 5px;
            }
            .c {
                overflow-x: auto;
            }
            table {
                width: 100%;
                min-width: 0;
            }
            th, td {
                padding: 8px;
                font-size: 12px;
            }
            th:nth-child(1), td:nth-child(1) {
                min-width: 80px;
                max-width: 80px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }
            th:nth-child(2), td:nth-child(2) {
                min-width: 60px;
                max-width: 60px;
            }
            th:nth-child(3), td:nth-child(3) {
                min-width: 50px;
                max-width: 50px;
            }
            th:nth-child(4), td:nth-child(4) {
                min-width: 50px;
                max-width: 50px;
            }
            th:nth-child(5), td:nth-child(5) {
                min-width: 50px;
                max-width: 50px;
            }
            th:nth-child(6), td:nth-child(6) {
                min-width: 40px;
                max-width: 40px;
            }
            th:nth-child(7), td:nth-child(7) {
                min-width: 40px;
                max-width: 40px;
            }
            input[type="tel"], input[type="number"] {
                width: 50px;
                font-size: 12px;
            }
            .df, .sm p {
                font-size: 14px;
            }
        }
        @media (max-width: 480px) {
            th, td {
                padding: 6px;
                font-size: 10px;
            }
            th:nth-child(1), td:nth-child(1) {
                min-width: 70px;
                max-width: 70px;
            }
            th:nth-child(2), td:nth-child(2) {
                min-width: 50px;
                max-width: 50px;
            }
            th:nth-child(3), td:nth-child(3) {
                min-width: 45px;
                max-width: 45px;
            }
            th:nth-child(4), td:nth-child(4) {
                min-width: 45px;
                max-width: 45px;
            }
            th:nth-child(5), td:nth-child(5) {
                min-width: 45px;
                max-width: 45px;
            }
            th:nth-child(6), td:nth-child(6) {
                min-width: 35px;
                max-width: 35px;
            }
            th:nth-child(7), td:nth-child(7) {
                min-width: 35px;
                max-width: 35px;
            }
            input[type="tel"], input[type="number"] {
                width: 40px;
                font-size: 10px;
            }
            .df, .sm p {
                font-size: 12px;
            }
        }
    </style>
</head>
<body class="d">
    <!-- Botón Modo Oscuro -->
    <button class="t" onclick="toggleTheme()"></button>

    <!-- Menú de Navegación -->
    <nav class="bg-gray-900 p-4 shadow-lg">
        <div class="container mx-auto flex justify-between items-center">
            <h1 class="text-white text-2xl font-bold">CalcDieta</h1>
            <div class="space-x-4">
                <button class="text-gray-300 hover:text-white transition" onclick="showSection('profile')">Perfil</button>
                <button class="text-gray-300 hover:text-white transition" onclick="showSection('diet')">Dieta</button>
                <button class="text-gray-300 hover:text-white transition" onclick="showSection('addFood')">Añadir Alimento</button>
                <button class="text-gray-300 hover:text-white transition" onclick="showSection('progress')">Progreso</button>
            </div>
        </div>
    </nav>

    <!-- Sección Perfil -->
    <div id="profile" class="container mx-auto p-6 hidden">
        <h2 class="text-3xl font-bold mb-6">Perfil</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <label for="pWeight" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Peso (kg):</label>
                <input type="number" id="pWeight" step="0.1" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
            </div>
            <div>
                <label for="pHeight" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Altura (cm):</label>
                <input type="number" id="pHeight" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
            </div>
            <div>
                <label for="pAge" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Edad:</label>
                <input type="number" id="pAge" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
            </div>
            <div>
                <label for="pGender" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Género:</label>
                <select id="pGender" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
                    <option value="male">Hombre</option>
                    <option value="female">Mujer</option>
                </select>
            </div>
            <div>
                <label for="pActivity" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Nivel de Actividad:</label>
                <select id="pActivity" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
                    <option value="1.2">Sedentario</option>
                    <option value="1.375">Ligero</option>
                    <option value="1.55">Moderado</option>
                    <option value="1.725">Activo</option>
                    <option value="1.9">Muy Activo</option>
                </select>
            </div>
        </div>
        <button class="mt-6 bg-emerald-500 text-white p-3 rounded-lg hover:bg-emerald-600 transition" onclick="saveProfile()">Guardar Perfil</button>
    </div>

    <!-- Sección Dieta -->
    <div id="diet" class="container mx-auto p-6">
        <h2 class="text-3xl font-bold mb-6">Dieta</h2>
        <div class="flex flex-col md:flex-row justify-center gap-6 mb-6">
            <div>
                <label for="u" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Usuario:</label>
                <select id="u" onchange="updateDiet()" class="mt-1 border rounded-lg p-3 bg-gray-50 dark:bg-gray-700 dark:text-white">
                    <option value="custom">Personalizado</option>
                    <option value="j">Jon</option>
                    <option value="a">Ainhoa</option>
                </select>
            </div>
            <div>
                <label for="d" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Día:</label>
                <select id="d" onchange="updateDiet()" class="mt-1 border rounded-lg p-3 bg-gray-50 dark:bg-gray-700 dark:text-white">
                    <option value="t">Entrenamiento</option>
                    <option value="mw">Lun-Mie</option>
                    <option value="th">Jue</option>
                    <option value="sa">Sab</option>
                    <option value="su">Dom</option>
                </select>
            </div>
        </div>

        <!-- Formulario para Añadir Comida -->
        <div class="mb-6 p-6 bg-gray-100 dark:bg-gray-800 rounded-lg shadow">
            <h3 class="text-xl font-semibold mb-4">Añadir Comida</h3>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                    <label for="newSection" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Sección:</label>
                    <select id="newSection" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
                        <option value="D">Desayuno</option>
                        <option value="Pr">Pre-entreno</option>
                        <option value="I">Intra-entreno</option>
                        <option value="Po">Post-entreno</option>
                        <option value="C">Comida</option>
                        <option value="M">Merienda</option>
                        <option value="Ce">Cena</option>
                        <option value="Pc">Pre-cama</option>
                        <option value="O">Otros</option>
                        <option value="S">Snack</option>
                    </select>
                </div>
                <div>
                    <label for="newFood" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Alimento:</label>
                    <select id="newFood" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white"></select>
                </div>
                <div>
                    <label for="newQuantity" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Cantidad (g):</label>
                    <input type="number" id="newQuantity" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
                </div>
            </div>
            <button class="mt-6 bg-blue-500 text-white p-3 rounded-lg hover:bg-blue-600 transition" onclick="addFoodToDiet()">Añadir a la Dieta</button>
        </div>

        <!-- Tablas de Comidas -->
        <div class="c" id="dt"></div>
        <div class="c">
            <table>
                <thead>
                    <tr><th colspan="5">Totales</th></tr>
                    <tr><th>Kcal</th><th>Prot</th><th>Hid</th><th>Grasa</th><th>Fibra</th></tr>
                </thead>
                <tbody>
                    <tr class="to">
                        <td id="tk">0</td>
                        <td id="tp">0</td>
                        <td id="tc">0</td>
                        <td id="tf">0</td>
                        <td id="tfi">0</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="df" id="di"></div>
        <div class="sm">
            <p><strong>Kcal:</strong> Energía total. Déficit calórico clave para perder peso. TDEE varía por día/usuario.</p>
            <p><strong>Prot:</strong> Reparación muscular. 1.6-2.2 g/kg para días de entreno.</p>
            <p><strong>Hid:</strong> Energía. Prioriza fibra para saciedad.</p>
            <p><strong>Grasa:</strong> Salud hormonal. 0.8-1 g/kg, grasas saludables.</p>
            <p><strong>Fibra:</strong> Saciedad, digestión. 25-30 g/día mujeres, 30-38 g/día hombres.</p>
        </div>
        <div class="a p-6 bg-white dark:bg-gray-800 rounded-lg shadow mt-6">
            <h3 class="text-xl font-semibold mb-4">Actividades</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label for="w1d" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Caminata 1 - Km:</label>
                    <input type="tel" id="w1d" value="0" step="0.1" pattern="[0-9]*" inputmode="numeric" onchange="updateDiet()" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
                    <label for="w1t" class="block text-sm font-medium mt-2 text-gray-700 dark:text-gray-300">o Min:</label>
                    <input type="tel" id="w1t" value="0" step="1" pattern="[0-9]*" inputmode="numeric" onchange="updateDiet()" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
                </div>
                <div>
                    <label for="w2d" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Caminata 2 - Km:</label>
                    <input type="tel" id="w2d" value="0" step="0.1" pattern="[0-9]*" inputmode="numeric" onchange="updateDiet()" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
                    <label for="w2t" class="block text-sm font-medium mt-2 text-gray-700 dark:text-gray-300">o Min:</label>
                    <input type="tel" id="w2t" value="0" step="1" pattern="[0-9]*" inputmode="numeric" onchange="updateDiet()" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
                </div>
                <div>
                    <label for="gt" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Gym (min):</label>
                    <input type="tel" id="gt" value="0" step="1" pattern="[0-9]*" inputmode="numeric" onchange="updateDiet()" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
                </div>
            </div>
            <p id="ac" class="mt-4 text-gray-700 dark:text-gray-300">Calorías actividad: 0 kcal</p>
        </div>
    </div>

    <!-- Sección Añadir Alimento -->
    <div id="addFood" class="container mx-auto p-6 hidden">
        <h2 class="text-3xl font-bold mb-6">Añadir Alimento</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
                <label for="foodId" class="block text-sm font-medium text-gray-700 dark:text-gray-300">ID (único):</label>
                <input type="text" id="foodId" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
            </div>
            <div>
                <label for="foodName" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Nombre:</label>
                <input type="text" id="foodName" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
            </div>
            <div>
                <label for="foodKcal" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Kcal (por 100g):</label>
                <input type="number" id="foodKcal" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
            </div>
            <div>
                <label for="foodProt" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Proteínas (g):</label>
                <input type="number" id="foodProt" step="0.1" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
            </div>
            <div>
                <label for="foodCarbs" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Hidratos (g):</label>
                <input type="number" id="foodCarbs" step="0.1" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
            </div>
            <div>
                <label for="foodFat" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Grasas (g):</label>
                <input type="number" id="foodFat" step="0.1" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
            </div>
            <div>
                <label for="foodFiber" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Fibra (g):</label>
                <input type="number" id="foodFiber" step="0.1" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
            </div>
        </div>
        <button class="mt-6 bg-purple-500 text-white p-3 rounded-lg hover:bg-purple-600 transition" onclick="addNewFood()">Añadir Alimento</button>
    </div>

    <!-- Sección Progreso -->
    <div id="progress" class="container mx-auto p-6 hidden">
        <h2 class="text-3xl font-bold mb-6">Progreso</h2>
        <div class="mb-6">
            <label for="weightLog" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Registrar Peso (kg):</label>
            <input type="number" id="weightLog" step="0.1" class="mt-1 border rounded-lg p-3 w-full bg-gray-50 dark:bg-gray-700 dark:text-white">
            <button class="mt-2 bg-teal-500 text-white p-3 rounded-lg hover:bg-teal-600 transition" onclick="logWeight()">Registrar</button>
        </div>
        <canvas id="weightChart" class="w-full h-64"></canvas>
    </div>

    <script>
        // Datos de Alimentos (f)
        let f = JSON.parse(localStorage.getItem('foods')) || {
            ch: { k: 33, p: 11, c: 0.4, f: 0, fi: 0 },
            hc: { k: 143, p: 12.7, c: 1.1, f: 9.5, fi: 0 },
            ha: { k: 390, p: 13, c: 68, f: 7, fi: 9 },
            fr: { k: 32, p: 0.7, c: 7.7, f: 0.3, fi: 2 },
            ag: { k: 160, p: 2, c: 8.5, f: 14.7, fi: 6.7 },
            po: { k: 165, p: 31, c: 0, f: 3.5, fi: 0 },
            ab: { k: 130, p: 2.7, c: 28.1, f: 0.3, fi: 0.4 },
            ao: { k: 900, p: 0, c: 0, f: 100, fi: 0 },
            br: { k: 35, p: 2.5, c: 7.1, f: 0.4, fi: 3.3 },
            wh: { k: 370, p: 90, c: 2, f: 1, fi: 0 },
            sa: { k: 206, p: 22, c: 0, f: 13, fi: 0 },
            es: { k: 23, p: 2.9, c: 3.6, f: 0.4, fi: 2.2 },
            pa: { k: 77, p: 2.5, c: 17, f: 0.1, fi: 2.2 },
            ca: { k: 360, p: 80, c: 5, f: 2.5, fi: 0 },
            pi: { k: 246, p: 9, c: 42, f: 3, fi: 6 },
            pi32: { k: 246.875, p: 8.75, c: 40.625, f: 3.75, fi: 7.5 },
            pfs: { k: 395.833, p: 12.5, c: 60.417, f: 7.292, fi: 23.958 },
            al: { k: 600, p: 21, c: 21, f: 50, fi: 13 },
            nu: { k: 654, p: 15.2, c: 13.7, f: 65, fi: 6.7 },
            ea: { k: 400, p: 90, c: 0, f: 0, fi: 0 },
            dx: { k: 400, p: 0, c: 100, f: 0, fi: 0 },
            cr: { k: 0, p: 0, c: 0, f: 0, fi: 0 },
            cf: { k: 275, p: 0, c: 0, f: 0, fi: 0 },
            va: { k: 131, p: 21, c: 0, f: 5, fi: 0 },
            et: { k: 250, p: 25, c: 0, f: 16, fi: 0 },
            eg: { k: 43.41, p: 0.95, c: 4.73, f: 2.61, fi: 1.36 },
            ta: { k: 287, p: 15, c: 40, f: 6, fi: 5.4 },
            pc: { k: 79, p: 16, c: 1.8, f: 0.9, fi: 0 },
            qc: { k: 267, p: 27, c: 0, f: 17, fi: 0 },
            cv: { k: 68, p: 0, c: 2.6, f: 0, fi: 0 },
            cb: { k: 33.636, p: 0, c: 0.085, f: 0, fi: 0 },
            pl: { k: 0, p: 0, c: 0, f: 0, fi: 0 },
            pe: { k: 220, p: 4, c: 50, f: 0, fi: 0 },
            chb: { k: 240, p: 19.17, c: 0.5, f: 18.33, fi: 0 }
        };

        // Datos de Dietas (d)
        let d = JSON.parse(localStorage.getItem('diets')) || {
            j: {
                t: [{ m: "D", f: "ch", g: 200 }, { m: "D", f: "hc", g: 60 }, { m: "D", f: "ha", g: 20 }, { m: "D", f: "fr", g: 0 }, { m: "D", f: "ag", g: 50 }, { m: "D", f: "nu", g: 15 }, { m: "D", f: "pi32", g: 0 }, { m: "Pr", f: "pl", g: 1 }, { m: "Pr", f: "pe", g: 30 }, { m: "Pr", f: "ea", g: 20 }, { m: "Pr", f: "dx", g: 5 }, { m: "Pr", f: "cf", g: 4 }, { m: "I", f: "ea", g: 20 }, { m: "I", f: "dx", g: 20 }, { m: "Po", f: "ea", g: 10 }, { m: "Po", f: "dx", g: 20 }, { m: "C", f: "po", g: 80 }, { m: "C", f: "ab", g: 80 }, { m: "C", f: "ao", g: 5 }, { m: "C", f: "br", g: 100 }, { m: "C", f: "pfs", g: 9.6 }, { m: "C", f: "hc", g: 60 }, { m: "M", f: "wh", g: 20 }, { m: "M", f: "fr", g: 0 }, { m: "Ce", f: "eg", g: 205 }, { m: "Ce", f: "ta", g: 63 }, { m: "Ce", f: "pc", g: 22 }, { m: "Ce", f: "qc", g: 51 }, { m: "Ce", f: "hc", g: 60 }, { m: "Ce", f: "ao", g: 1 }, { m: "Pc", f: "ca", g: 30 }, { m: "O", f: "cv", u: 2 }, { m: "O", f: "cb", u: 0 }],
                mw: [{ m: "D", f: "ch", g: 200 }, { m: "D", f: "hc", g: 60 }, { m: "D", f: "ha", g: 20 }, { m: "D", f: "fr", g: 0 }, { m: "D", f: "ag", g: 50 }, { m: "D", f: "nu", g: 15 }, { m: "D", f: "pi32", g: 0 }, { m: "Pr", f: "pl", g: 1 }, { m: "Pr", f: "pe", g: 30 }, { m: "Pr", f: "ea", g: 20 }, { m: "Pr", f: "dx", g: 5 }, { m: "Pr", f: "cf", g: 4 }, { m: "I", f: "ea", g: 20 }, { m: "I", f: "dx", g: 20 }, { m: "Po", f: "ea", g: 10 }, { m: "Po", f: "dx", g: 20 }, { m: "C", f: "po", g: 80 }, { m: "C", f: "ab", g: 80 }, { m: "C", f: "ao", g: 5 }, { m: "C", f: "br", g: 100 }, { m: "C", f: "pfs", g: 9.6 }, { m: "C", f: "hc", g: 60 }, { m: "M", f: "wh", g: 20 }, { m: "M", f: "fr", g: 0 }, { m: "Ce", f: "eg", g: 205 }, { m: "Ce", f: "pa", g: 200 }, { m: "Ce", f: "qc", g: 51 }, { m: "Ce", f: "chb", g: 120 }, { m: "Pc", f: "ca", g: 30 }, { m: "O", f: "cv", u: 2 }, { m: "O", f: "cb", u: 0 }],
                th: [{ m: "D", f: "ch", g: 100 }, { m: "D", f: "hc", g: 60 }, { m: "D", f: "ha", g: 20 }, { m: "D", f: "fr", g: 0 }, { m: "D", f: "ag", g: 50 }, { m: "D", f: "nu", g: 15 }, { m: "D", f: "cr", g: 5 }, { m: "D", f: "cf", g: 1 }, { m: "D", f: "ca", g: 30 }, { m: "D", f: "pi32", g: 0 }, { m: "C", f: "po", g: 60 }, { m: "C", f: "ab", g: 60 }, { m: "C", f: "ao", g: 7 }, { m: "C", f: "br", g: 100 }, { m: "C", f: "pfs", g: 9.6 }, { m: "C", f: "hc", g: 60 }, { m: "M", f: "ca", g: 30 }, { m: "Ce", f: "eg", g: 205 }, { m: "Ce", f: "ta", g: 63 }, { m: "Ce", f: "pc", g: 22 }, { m: "Ce", f: "qc", g: 51 }, { m: "Ce", f: "hc", g: 60 }, { m: "Ce", f: "ao", g: 1 }, { m: "Pc", f: "ca", g: 30 }, { m: "O", f: "cv", u: 2 }, { m: "O", f: "cb", u: 0 }],
                sa: [{ m: "D", f: "ch", g: 100 }, { m: "D", f: "hc", g: 60 }, { m: "D", f: "ha", g: 20 }, { m: "D", f: "fr", g: 0 }, { m: "D", f: "ag", g: 50 }, { m: "D", f: "nu", g: 15 }, { m: "D", f: "cr", g: 5 }, { m: "D", f: "cf", g: 1 }, { m: "D", f: "ca", g: 30 }, { m: "D", f: "pi32", g: 0 }, { m: "C", f: "et", g: 100 }, { m: "C", f: "pa", g: 200 }, { m: "C", f: "ao", g: 1 }, { m: "C", f: "hc", g: 60 }, { m: "M", f: "ca", g: 30 }, { m: "Ce", f: "eg", g: 205 }, { m: "Ce", f: "ta", g: 63 }, { m: "Ce", f: "pc", g: 22 }, { m: "Ce", f: "qc", g: 51 }, { m: "Ce", f: "hc", g: 60 }, { m: "Ce", f: "ao", g: 1 }, { m: "Pc", f: "ca", g: 30 }, { m: "O", f: "cv", u: 2 }, { m: "O", f: "cb", u: 0 }],
                su: [{ m: "D", f: "ch", g: 100 }, { m: "D", f: "hc", g: 60 }, { m: "D", f: "ha", g: 20 }, { m: "D", f: "fr", g: 0 }, { m: "D", f: "ag", g: 50 }, { m: "D", f: "nu", g: 15 }, { m: "D", f: "cr", g: 5 }, { m: "D", f: "cf", g: 1 }, { m: "D", f: "ca", g: 30 }, { m: "D", f: "pi32", g: 0 }, { m: "C", f: "et", g: 100 }, { m: "C", f: "pa", g: 200 }, { m: "C", f: "ao", g: 1 }, { m: "C", f: "hc", g: 60 }, { m: "M", f: "ca", g: 30 }, { m: "Ce", f: "eg", g: 205 }, { m: "Ce", f: "ta", g: 63 }, { m: "Ce", f: "pc", g: 22 }, { m: "Ce", f: "qc", g: 51 }, { m: "Ce", f: "hc", g: 60 }, { m: "Ce", f: "ao", g: 1 }, { m: "Pc", f: "ca", g: 30 }, { m: "O", f: "cv", u: 2 }, { m: "O", f: "cb", u: 0 }]
            },
            a: {
                t: [{ m: "D", f: "ch", g: 200 }, { m: "D", f: "hc", g: 60 }, { m: "D", f: "ha", g: 30 }, { m: "D", f: "fr", g: 0 }, { m: "D", f: "ag", g: 50 }, { m: "D", f: "nu", g: 15 }, { m: "D", f: "pi32", g: 0 }, { m: "Pr", f: "pl", g: 1 }, { m: "Pr", f: "pe", g: 30 }, { m: "Pr", f: "ea", g: 20 }, { m: "Pr", f: "dx", g: 5 }, { m: "Pr", f: "cf", g: 4 }, { m: "Po", f: "ea", g: 20 }, { m: "Po", f: "dx", g: 5 }, { m: "Po", f: "cr", g: 5 }, { m: "C", f: "po", g: 60 }, { m: "C", f: "ab", g: 80 }, { m: "C", f: "ao", g: 10 }, { m: "C", f: "br", g: 100 }, { m: "C", f: "pfs", g: 9.6 }, { m: "C", f: "hc", g: 60 }, { m: "M", f: "wh", g: 20 }, { m: "M", f: "fr", g: 0 }, { m: "Ce", f: "sa", g: 80 }, { m: "Ce", f: "pa", g: 80 }, { m: "Ce", f: "es", g: 100 }, { m: "Ce", f: "ao", g: 7 }, { m: "Pc", f: "ca", g: 30 }, { m: "O", f: "cv", u: 0 }, { m: "S", f: "pi", g: 0 }, { m: "S", f: "al", g: 0 }],
                mw: [{ m: "D", f: "ch", g: 200 }, { m: "D", f: "hc", g: 60 }, { m: "D", f: "ha", g: 30 }, { m: "D", f: "fr", g: 0 }, { m: "D", f: "ag", g: 50 }, { m: "D", f: "nu", g: 15 }, { m: "D", f: "pi32", g: 0 }, { m: "Pr", f: "pl", g: 1 }, { m: "Pr", f: "pe", g: 30 }, { m: "Pr", f: "ea", g: 20 }, { m: "Pr", f: "dx", g: 5 }, { m: "Pr", f: "cf", g: 4 }, { m: "Po", f: "ea", g: 20 }, { m: "Po", f: "dx", g: 5 }, { m: "Po", f: "cr", g: 5 }, { m: "C", f: "po", g: 60 }, { m: "C", f: "ab", g: 80 }, { m: "C", f: "ao", g: 10 }, { m: "C", f: "br", g: 100 }, { m: "C", f: "pfs", g: 9.6 }, { m: "C", f: "hc", g: 60 }, { m: "M", f: "wh", g: 20 }, { m: "M", f: "fr", g: 0 }, { m: "Ce", f: "eg", g: 205 }, { m: "Ce", f: "pa", g: 200 }, { m: "Ce", f: "qc", g: 51 }, { m: "Ce", f: "chb", g: 120 }, { m: "Pc", f: "ca", g: 30 }, { m: "O", f: "cv", u: 0 }, { m: "S", f: "pi", g: 0 }, { m: "S", f: "al", g: 0 }],
                th: [{ m: "D", f: "ch", g: 100 }, { m: "D", f: "hc", g: 60 }, { m: "D", f: "ha", g: 20 }, { m: "D", f: "fr", g: 0 }, { m: "D", f: "ag", g: 35 }, { m: "D", f: "nu", g: 15 }, { m: "D", f: "cr", g: 5 }, { m: "D", f: "cf", g: 1 }, { m: "D", f: "pi32", g: 0 }, { m: "C", f: "po", g: 60 }, { m: "C", f: "ab", g: 60 }, { m: "C", f: "ao", g: 7 }, { m: "C", f: "br", g: 100 }, { m: "C", f: "pfs", g: 9.6 }, { m: "C", f: "hc", g: 60 }, { m: "M", f: "wh", g: 20 }, { m: "Ce", f: "sa", g: 80 }, { m: "Ce", f: "es", g: 100 }, { m: "Ce", f: "ao", g: 7 }, { m: "Pc", f: "ca", g: 30 }, { m: "O", f: "cv", u: 0 }, { m: "S", f: "pi", g: 0 }, { m: "S", f: "al", g: 0 }],
                sa: [{ m: "D", f: "ch", g: 100 }, { m: "D", f: "hc", g: 60 }, { m: "D", f: "ha", g: 20 }, { m: "D", f: "fr", g: 0 }, { m: "D", f: "ag", g: 35 }, { m: "D", f: "nu", g: 15 }, { m: "D", f: "cr", g: 5 }, { m: "D", f: "cf", g: 1 }, { m: "D", f: "pi32", g: 0 }, { m: "C", f: "et", g: 100 }, { m: "C", f: "pa", g: 200 }, { m: "C", f: "ao", g: 1 }, { m: "C", f: "hc", g: 60 }, { m: "M", f: "wh", g: 20 }, { m: "Ce", f: "sa", g: 80 }, { m: "Ce", f: "es", g: 100 }, { m: "Ce", f: "ao", g: 7 }, { m: "Pc", f: "ca", g: 30 }, { m: "O", f: "cv", u: 0 }, { m: "S", f: "pi", g: 0 }, { m: "S", f: "al", g: 0 }],
                su: [{ m: "D", f: "ch", g: 100 }, { m: "D", f: "hc", g: 60 }, { m: "D", f: "ha", g: 20 }, { m: "D", f: "fr", g: 0 }, { m: "D", f: "ag", g: 35 }, { m: "D", f: "nu", g: 15 }, { m: "D", f: "cr", g: 5 }, { m: "D", f: "cf", g: 1 }, { m: "D", f: "pi32", g: 0 }, { m: "C", f: "et", g: 100 }, { m: "C", f: "pa", g: 200 }, { m: "C", f: "ao", g: 1 }, { m: "C", f: "hc", g: 60 }, { m: "M", f: "wh", g: 20 }, { m: "Ce", f: "sa", g: 80 }, { m: "Ce", f: "es", g: 100 }, { m: "Ce", f: "ao", g: 7 }, { m: "Pc", f: "ca", g: 30 }, { m: "O", f: "cv", u: 0 }, { m: "S", f: "pi", g: 0 }, { m: "S", f: "al", g: 0 }]
            },
            custom: { t: [], mw: [], th: [], sa: [], su: [] }
        };

        // Perfil del Usuario
        let profile = JSON.parse(localStorage.getItem('profile')) || {
            weight: 70,
            height: 170,
            age: 30,
            gender: 'male',
            activity: 1.55
        };

        // Registro de Peso
        let weightLog = JSON.parse(localStorage.getItem('weightLog')) || [];

        // Funciones de Navegación
        function showSection(sectionId) {
            document.getElementById('profile').classList.add('hidden');
            document.getElementById('diet').classList.add('hidden');
            document.getElementById('addFood').classList.add('hidden');
            document.getElementById('progress').classList.add('hidden');
            document.getElementById(sectionId).classList.remove('hidden');
            if (sectionId === 'progress') updateWeightChart();
        }

        // Guardar Perfil
        function saveProfile() {
            profile.weight = parseFloat(document.getElementById('pWeight').value) || 70;
            profile.height = parseFloat(document.getElementById('pHeight').value) || 170;
            profile.age = parseFloat(document.getElementById('pAge').value) || 30;
            profile.gender = document.getElementById('pGender').value;
            profile.activity = parseFloat(document.getElementById('pActivity').value);
            localStorage.setItem('profile', JSON.stringify(profile));
            alert('Perfil guardado');
            updateDiet();
        }

        // Añadir Alimento Nuevo
        function addNewFood() {
            const id = document.getElementById('foodId').value.trim();
            const name = document.getElementById('foodName').value.trim();
            const kcal = parseFloat(document.getElementById('foodKcal').value) || 0;
            const prot = parseFloat(document.getElementById('foodProt').value) || 0;
            const carbs = parseFloat(document.getElementById('foodCarbs').value) || 0;
            const fat = parseFloat(document.getElementById('foodFat').value) || 0;
            const fiber = parseFloat(document.getElementById('foodFiber').value) || 0;

            if (!id || !name) {
                alert('Por favor, ingresa un ID y un nombre para el alimento');
                return;
            }
            if (f[id]) {
                alert('El ID ya existe, elige otro');
                return;
            }

            f[id] = { k: kcal, p: prot, c: carbs, f: fat, fi: fiber };
            localStorage.setItem('foods', JSON.stringify(f));
            updateFoodSelect();
            alert('Alimento añadido');
        }

        // Actualizar Select de Alimentos
        function updateFoodSelect() {
            const foodSelect = document.getElementById('newFood');
            foodSelect.innerHTML = '';
            for (let foodId in f) {
                const option = document.createElement('option');
                option.value = foodId;
                option.textContent = getFoodName(foodId);
                foodSelect.appendChild(option);
            }
        }

        // Añadir Comida a la Dieta
        function addFoodToDiet() {
            const section = document.getElementById('newSection').value;
            const food = document.getElementById('newFood').value;
            const quantity = parseFloat(document.getElementById('newQuantity').value) || 0;
            const user = document.getElementById('u').value;
            const day = document.getElementById('d').value;

            if (user !== 'custom') {
                alert('Por favor, selecciona el usuario "Personalizado" para añadir comidas');
                return;
            }

            d.custom[day].push({ m: section, f: food, g: quantity });
            localStorage.setItem('diets', JSON.stringify(d));
            updateDiet();
        }

        // Registrar Peso
        function logWeight() {
            const weight = parseFloat(document.getElementById('weightLog').value);
            if (!weight) return;
            const date = new Date().toISOString().split('T')[0];
            weightLog.push({ date, weight });
            localStorage.setItem('weightLog', JSON.stringify(weightLog));
            updateWeightChart();
        }

        // Actualizar Gráfico de Peso
        let weightChart;
        function updateWeightChart() {
            const ctx = document.getElementById('weightChart').getContext('2d');
            if (weightChart) weightChart.destroy();

            weightChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: weightLog.map(entry => entry.date),
                    datasets: [{
                        label: 'Peso (kg)',
                        data: weightLog.map(entry => entry.weight),
                        borderColor: 'rgba(16, 185, 129, 1)',
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: { title: { display: true, text: 'Fecha' } },
                        y: { title: { display: true, text: 'Peso (kg)' } }
                    }
                }
            });
        }

        // Funciones de Utilidad
        function toggleTheme() {
            document.body.classList.toggle("d");
        }

        function getFoodName(s, user = null, day = null, diet = null) {
            if (s === "cb") return "Cubata Ron Cola";
            if (s === "hc") {
                if (!user || !day || !diet) return "Huevo Completo";
                const meal = diet[user][day].find(e => e.f === "hc");
                if (!meal) return "Huevo Completo";
                const section = meal.m;
                if (section === "C" && (day === "sa" || day === "su" || day === "mw")) return "Huevo Frito Airfryer";
                if (section === "C" && (day === "t" || day === "th")) return "Huevo Cocido";
                return "Huevo Completo";
            }
            if (s === "pl") return "Pastilla L-Carnitina";
            return s.split("_").map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(" ");
        }

        function calculateActivityCalories() {
            const w = profile.weight;
            const w1d = parseFloat(document.getElementById("w1d").value) || 0;
            const w1t = parseFloat(document.getElementById("w1t").value) || 0;
            const w2d = parseFloat(document.getElementById("w2d").value) || 0;
            const w2t = parseFloat(document.getElementById("w2t").value) || 0;
            const gt = parseFloat(document.getElementById("gt").value) || 0;
            let wC = 0;

            const kcalPerKm = profile.gender === 'male' ? 0.65 : 0.55;
            const kcalPerMinGym = profile.gender === 'male' ? 8 : 6;

            w1d > 0 ? wC += w1d * kcalPerKm * w : w1t > 0 && (wC += w1t * (profile.gender === 'male' ? 5 : 4));
            w2d > 0 ? wC += w2d * kcalPerKm * w : w2t > 0 && (wC += w2t * (profile.gender === 'male' ? 5 : 4));
            const gC = gt * kcalPerMinGym;

            return (wC + gC).toFixed(1);
        }

        function calculateTDEE(day) {
            const w = profile.weight;
            const h = profile.height;
            const a = profile.age;
            const af = (day === "t" || day === "mw") ? 1.725 : 1.55;
            const b = profile.gender === 'male' ? 10 * w + 6.25 * h - 5 * a + 5 : 10 * w + 6.25 * h - 5 * a - 161;
            return (b * (profile.activity || af)).toFixed(1);
        }

        function estimateWeightLoss(deficit) {
            const dailyLoss = (deficit / 7700) * 1000;
            const weeklyLoss = dailyLoss * 7;
            return `Pérdida: ${dailyLoss.toFixed(1)} g/día (${weeklyLoss.toFixed(1)} g/sem)`;
        }

        function createSectionTable(section, items, user, day, startIndex) {
            const table = document.createElement("table");
            const thead = document.createElement("thead");
            const tbody = document.createElement("tbody");

            const headerRow1 = document.createElement("tr");
            const sectionHeader = document.createElement("th");
            sectionHeader.colSpan = 7;
            sectionHeader.className = "sh";
            sectionHeader.textContent = section;
            headerRow1.appendChild(sectionHeader);
            thead.appendChild(headerRow1);

            const headerRow2 = document.createElement("tr");
            ["Alimento", "Cant (g)", "Kcal", "Prot", "Hid", "Grasa", "Fibra"].forEach(text => {
                const th = document.createElement("th");
                th.textContent = text;
                headerRow2.appendChild(th);
            });
            thead.appendChild(headerRow2);

            let sC = 0, sP = 0, sH = 0, sF = 0, sFi = 0;
            items.forEach((e, idx) => {
                const row = document.createElement("tr");
                const fd = f[e.f];
                const g = e.u !== undefined ? (e.f === "cv" ? e.u * 125 : e.u * 330) : e.g;
                const cells = [
                    getFoodName(e.f, user, day, d),
                    e.u !== undefined ? `<input type="tel" value="${e.u}" onchange="d['${user}']['${day}'][${startIndex + idx}].u=this.value;updateDiet()">` : `<input type="tel" value="${e.g}" onchange="d['${user}']['${day}'][${startIndex + idx}].g=this.value;updateDiet()">`,
                    (fd.k * g / 100).toFixed(1),
                    (fd.p * g / 100).toFixed(1),
                    (fd.c * g / 100).toFixed(1),
                    (fd.f * g / 100).toFixed(1),
                    (fd.fi * g / 100).toFixed(1)
                ];
                cells.forEach(cell => {
                    const td = document.createElement("td");
                    td.innerHTML = cell;
                    row.appendChild(td);
                });
                sC += (fd.k * g / 100);
                sP += (fd.p * g / 100);
                sH += (fd.c * g / 100);
                sF += (fd.f * g / 100);
                sFi += (fd.fi * g / 100);
                tbody.appendChild(row);
            });

            const subtotalRow = document.createElement("tr");
            subtotalRow.className = "st";
            ["Subtotal", "", "", sC.toFixed(1), sP.toFixed(1), sH.toFixed(1), sF.toFixed(1), sFi.toFixed(1)].forEach(text => {
                const td = document.createElement("td");
                td.textContent = text;
                subtotalRow.appendChild(td);
            });
            tbody.appendChild(subtotalRow);

            table.appendChild(thead);
            table.appendChild(tbody);
            return table;
        }

        function updateDiet() {
            try {
                const user = document.getElementById("u")?.value;
                const day = document.getElementById("d")?.value;
                if (!user || !day) return;

                const diet = d[user][day];
                const container = document.getElementById("dt");
                if (!container) return;
                container.innerHTML = "";

                const gt = document.getElementById("gt");
                if (gt) {
                    if (day === "t" || day === "mw") gt.value = 45;
                    else gt.value = 0;
                }

                let totalCalories = 0, totalProtein = 0, totalCarbs = 0, totalFat = 0, totalFiber = 0;
                const sections = (user === "j" && (day === "th" || day === "sa" || day === "su")) ? ["D", "C", "M", "Ce", "Pc", "O", "S"] : ((day === "t" || day === "mw") ? ["D", "Pr", "I", "Po", "C", "M", "Ce", "Pc", "O", "S"] : ["D", "C", "M", "Ce", "Pc", "O", "S"]);
                const sectionGroups = (day === "t" || day === "mw") ? { D: "D", Pr: "P/I/Po", I: "P/I/Po", Po: "P/I/Po", C: "C", M: "M", Ce: "Ce", Pc: "Pc", O: "O", S: "S" } : { D: "D", C: "C", M: "M", Ce: "Ce", Pc: "Pc", O: "O", S: "S" };

                const groupedDiet = {};
                diet.forEach(e => {
                    const s = sectionGroups[e.m] || e.m;
                    if (!groupedDiet[s]) groupedDiet[s] = [];
                    groupedDiet[s].push(e);
                });

                let currentIndex = 0;
                for (let section in groupedDiet) {
                    const items = groupedDiet[section];
                    const table = createSectionTable(section, items, user, day, currentIndex);
                    container.appendChild(table);
                    items.forEach(e => {
                        const fd = f[e.f];
                        if (!fd) return;
                        const g = e.u !== undefined ? (e.f === "cv" ? e.u * 125 : e.u * 330) : e.g;
                        totalCalories += (fd.k * g / 100) || 0;
                        totalProtein += (fd.p * g / 100) || 0;
                        totalCarbs += (fd.c * g / 100) || 0;
                        totalFat += (fd.f * g / 100) || 0;
                        totalFiber += (fd.fi * g / 100) || 0;
                    });
                    currentIndex += items.length;
                }

                const tk = document.getElementById("tk");
                const tp = document.getElementById("tp");
                const tc = document.getElementById("tc");
                const tf = document.getElementById("tf");
                const tfi = document.getElementById("tfi");
                if (tk) tk.textContent = totalCalories.toFixed(1);
                if (tp) tp.textContent = totalProtein.toFixed(1);
                if (tc) tc.textContent = totalCarbs.toFixed(1);
                if (tf) tf.textContent = totalFat.toFixed(1);
                if (tfi) tfi.textContent = totalFiber.toFixed(1);

                const activityCalories = calculateActivityCalories() || 0;
                const ac = document.getElementById("ac");
                if (ac) ac.textContent = `Calorías actividad: ${activityCalories} kcal`;

                const tdee = calculateTDEE(day) || 0;
                const totalEnergyExpenditure = parseFloat(tdee) + parseFloat(activityCalories);
                const deficit = (totalEnergyExpenditure - totalCalories).toFixed(2);
                const di = document.getElementById("di");
                if (di) di.textContent = `Déficit: ${deficit} kcal (TDEE: ${tdee} kcal + Act: ${activityCalories} kcal) - ${estimateWeightLoss(parseFloat(deficit))}`;
            } catch (e) {
                console.error(e);
            }
        }

        // Inicialización
        window.onload = function() {
            document.getElementById('pWeight').value = profile.weight;
            document.getElementById('pHeight').value = profile.height;
            document.getElementById('pAge').value = profile.age;
            document.getElementById('pGender').value = profile.gender;
            document.getElementById('pActivity').value = profile.activity;
            updateFoodSelect();
            updateDiet();
        };
    </script>
</body>
</html>
